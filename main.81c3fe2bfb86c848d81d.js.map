{"version":3,"sources":["webpack:///./index.js"],"names":["selector","targetDate","getTime","clearInterval","intervalId","days","textContent","countTime","hours","mins","secs","this","timer","document","querySelector","start","setInterval","updateTimer","timeNow","Date","now","time","Math","floor"],"mappings":"mIAqDc,I,WAlDZ,cAAsC,I,MAAA,OAAxBA,EAAwB,EAAxBA,SAAUC,EAAc,EAAdA,W,EAqCV,WACR,EAAKC,WAAa,EACpBC,cAAc,EAAKC,aAIrB,EAAKC,KAAKC,YAAc,EAAKC,YAAYF,KACzC,EAAKG,MAAMF,YAAc,EAAKC,YAAYC,MAC1C,EAAKC,KAAKH,YAAc,EAAKC,YAAYE,KACzC,EAAKC,KAAKJ,YAAc,EAAKC,YAAYG,Q,EA9CL,iB,EAAA,M,sFACpCC,KAAKV,WAAaA,EAAWC,UAC7BS,KAAKC,MAAQC,SAASC,cAAcd,GACpCW,KAAKN,KAAOM,KAAKC,MAAME,cAAc,uBACrCH,KAAKH,MAAQG,KAAKC,MAAME,cAAc,wBACtCH,KAAKF,KAAOE,KAAKC,MAAME,cAAc,uBACrCH,KAAKD,KAAOC,KAAKC,MAAME,cAAc,uBACrCH,KAAKI,Q,2BAGPA,MAAA,WACE,GAAIJ,KAAKT,WAAa,EAKpB,OAJAS,KAAKN,KAAKC,YAAc,EACxBK,KAAKH,MAAMF,YAAc,EACzBK,KAAKF,KAAKH,YAAc,OACxBK,KAAKD,KAAKJ,YAAc,GAGxBK,KAAKP,WAAaY,YAAYL,KAAKM,YAAa,M,EAIpDf,QAAA,WACE,IAAMgB,EAAUC,KAAKC,MAErB,OADaT,KAAKV,WAAaiB,G,EAIjCX,UAAA,WACE,IAAMc,EAAOV,KAAKT,UACZG,EAAOiB,KAAKC,MAAMF,EAAO,OAI/B,MAAO,CAAEb,MAHKc,KAAKC,MAAOF,EAAO,MAAR,MAGThB,OAAMI,KAFTa,KAAKC,MAAOF,EAAO,KAAR,KAEIX,KADfY,KAAKC,MAAOF,EAAO,IAAe,O,KAiBrC,CAAmB,CAC/BrB,SAAU,WACVC,WAAY,IAAIkB,KAAK,oB","file":"main.81c3fe2bfb86c848d81d.js","sourcesContent":["import './styles.css';\n\nclass CountdownTimer {\n  constructor({ selector, targetDate }) {\n    this.targetDate = targetDate.getTime();\n    this.timer = document.querySelector(selector);\n    this.days = this.timer.querySelector('[data-value=\"days\"]');\n    this.hours = this.timer.querySelector('[data-value=\"hours\"]');\n    this.mins = this.timer.querySelector('[data-value=\"mins\"]');\n    this.secs = this.timer.querySelector('[data-value=\"secs\"]');\n    this.start();\n  }\n\n  start() {\n    if (this.getTime() <= 0) {\n      this.days.textContent = 0;\n      this.hours.textContent = 0;\n      this.mins.textContent = 0;\n      this.secs.textContent = 0;\n      return;\n    } else {\n      this.intervalId = setInterval(this.updateTimer, 1000);\n    }\n  }\n\n  getTime() {\n    const timeNow = Date.now();\n    const time = this.targetDate - timeNow;\n    return time;\n  }\n\n  countTime() {\n    const time = this.getTime();\n    const days = Math.floor(time / (1000 * 60 * 60 * 24));\n    const hours = Math.floor((time % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));\n    const mins = Math.floor((time % (1000 * 60 * 60)) / (1000 * 60));\n    const secs = Math.floor((time % (1000 * 60)) / 1000);\n    return { hours, days, mins, secs };\n  }\n\n  updateTimer = () => {\n    if (this.getTime() <= 0) {\n      clearInterval(this.intervalId);\n      return;\n    }\n\n    this.days.textContent = this.countTime().days;\n    this.hours.textContent = this.countTime().hours;\n    this.mins.textContent = this.countTime().mins;\n    this.secs.textContent = this.countTime().secs;\n  };\n}\n\nconst timer = new CountdownTimer({\n  selector: '#timer-1',\n  targetDate: new Date('Dec 31, 2020'),\n});\n"],"sourceRoot":""}